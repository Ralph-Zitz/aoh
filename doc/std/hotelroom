OBJECT
	hotelroom


SYNOPSIS
	inherit "room/hotelroom";

	(For '#include' look at the documentation to /std/room.)


DESCRIPTION
	A hotelroom is a place where adventurers could log out('quit').
	When they login the next time, they appear in this room and
	not in their home city. This is needed, because the mud is big
	and adventurers should not be forced to travel each time from 
	their home city to e.g. quest places.

	The hotelroom is baseed on /std/room. You can use all functions
	from this master object. 

        This room doesn't include a reception, i.e. you must make sure,
        that a player, who enters this room has paid for it.
        When he/she leaves the game, he/she will receive an autoloading-
        object which stores the original home. So there might be problems
        with players who loose all their autoloading stuff: Their "home"
        is still set to the hotelroom and won't be set back.

	You can define your own commands that a player have to type 
	for quitting in a hotelroom. The default is set to 'sleep' and
        'quit'.

	varargs int AddSleepCmd(string cmdname, string funcname);
		This function gives you the chance to define your own
		'quitting-commands'. The second parameter is optional.
		In <funcname> you can give the name of a function that
		will be executed before the adventurer is sent to sleep.

        void SetHotelName(string str);
                Use this function instead of SetIntShort().



EXAMPLE

	inherit "room/hotelroom";

	void create() {
		::create();
		SetHotelName("My hotel.\n");
		SetIntLong("My long description. Use 'dream' or 'rest'.\n");
		AddExit("west", ".....pathname");
		AddSleepCmd("dream", "byebye"); /* needs a own lfun 'byebye' */
		AddSleepCmd("rest");
	}

	void byebye() {
		write("You glide into your dreams...\n");
	}


INHERITANCE TREE
	hotelroom
	  |
	  `-std/room


SEE ALSO
