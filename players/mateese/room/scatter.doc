               Auto-Scattering, 11.02.1992  ---  Mateese 
               -----------------------------------------

The aim of auto-scattering is that the creation of new objects which
shall be placed somewhere in Nightfall doesn't need additional code
in someone's castle to spread it.
Instead a special room in my castle, the scatter room, tells on every
reset the things it contains to scatter themselves. These things now
tell the room, where to scatter them (of course this could be done
by the things on their own, but in most cases the scatter routines
of the room are sufficient on this job).
Additionally, on every reset the room saves the names of the things
who can do auto-scattering, so with every reboot the scattering 
restarts automagically. Also, it is possible to add a new thing to
the pile of things to be scattered just by dropping it in this room.

To support auto-scattering, these things must define these functions:


int query_auto_scatter()

  This is called by the room to find out, whether a thing supports
  auto-scattering or not.
  Results are:
   =  0 : The thing doesn't do auto-scattering (this also is the case
          when it doesn't define this function)
   = -1 : This thing just wants to get loaded on reboot, don't scatter
          it.
   =  1 : Yeah, this wants to be auto-scattered.


int auto_scatter (object scroom, int arg)

  This function scatters this object around. It may access the room
  via the parm scroom.
  <arg> is the arg from reset().
  Result is the number of objects really scattered.


string query_name()

  The string returned here is used to check the presence of the 
  thing where it will be scattered to (good against deliberate
  multi-scatters). Make sure that the name returned here will
  be recognized by the object's id() function.


To ease the scattering, the room offers to functions for a general
scattering.


int scatter (object scobj, string dest, int avail, string scmsg)

  This moves a clone of <scobj> to <dest>, depending on the needed
  level of <avail>ability. If the scattering succeeds, the dest-room
  is send <scmsg>.

  <dest> contains a list of stacked destinations, separated by ':'.
  The first and non-optional dest is the room! The following dests
  are searched with present() in the previous given dest.
    Ex: "/players/mateese/room/clearing"
          This moves the object to my clearing.
        "/room/pub2:dispenser 2:bottle"
          Move into the pub, there into the bottle in the 2nd dispenser.

  <avail> says, how deep the destination must be found. Say, we have
  dest="/room/pub2:harry" and avail=2, then the scatter takes place
  ONLY if Harry happens to be in the pub. Would be avail=1, then the
  room would try to scatter into the pub, and there into Harry. If
  Harry isn't at the pub, the thing would just be put into the pub.
  avail=0 stands for "complete destination wanted".

  Results are: 
    n..1 : Scatter failed, look at trans() to find out why
       0 : Scatter done
      -1 : Destination not found
      -2 : Scattered to a partial destination
      -3 : Illegal destination
      -4 : Not scattered since there is already a thingo there


int lscatter (scobj, dest, avail, scmsg)

  This does the same as scatter() except it also says it loudly to
  the scatter room.


object query_scobject ()

  Returns the last scattered object or 0 if the scatter wasn't successful.
