/*--------------------------------------------------------------------------
 * /secure/kernel/compat.ic -- Compat code for old and obsolete efuns.
 *
 * Copyright (C) 1997 by One Step Beyond.
 * All Rights Reserved.
 * Permission granted for non-commercial use.
 *--------------------------------------------------------------------------
 * This file is included(!) from /secure/kernel.c to form the kernel.
 * Implemented sefuns are:
 *   query_host_name()
 *   version()
 *--------------------------------------------------------------------------
 */

#include <driver/wizlist.h>
#include <msgclass.h>

/*-------------------------------------------------------------------------*/
public string version() 

/* Return the version string of the gamedriver.
 */

{ 
  return __VERSION__; 
}

#ifdef __HOST_NAME__
/*-------------------------------------------------------------------------*/
public string query_host_name() 

/* Return the hostname we are running on.
 */

{
    return __HOST_NAME__;
}
#endif

/*-------------------------------------------------------------------------*/
#if !__EFUN_DEFINED__(file_name)

public varargs string file_name (object obj)
{
    if (obj) return object_name(obj);
    return object_name(previous_object());
}
#endif

/*-------------------------------------------------------------------------*/
#if !__EFUN_DEFINED__(member_array)

public int member_array (mixed elem, mixed * array)
{
    return member(array, elem);
}
#endif

/***************************************************************************/
varargs void wizlist(string name)
{
    int i, pos, total_cmd;
    int *cmds;
    mixed *a;
    mixed *b;

    if (!name) {
        name = ({string})this_player()->QueryRealName();
        if (!name) {
            msg_write(CMSG_GENERIC, "Need to provide a name or 'ALL' to the wizlist function.\n");
            return;
        }
    }
    a = transpose_array(wizlist_info());
    cmds = a[WL_COMMANDS];
    a[WL_COMMANDS] = a[0];
    a[0] = cmds;

    a = unmkmapping(apply(#'mkmapping, a));
    cmds = a[0];
    a[0] = a[WL_COMMANDS];
    a[WL_COMMANDS] = cmds;

    if ((pos = member(a[WL_NAME], name)) < 0 && name != "ALL")
    {
        msg_write(CMSG_GENERIC, "No wizlist info for '"+name+"' found.\n");
        return;
    }
    b = allocate(sizeof(cmds));
    for (i = sizeof(cmds); i;) {
        b[<i] = i;
        total_cmd += cmds[--i];
    }
    a = transpose_array(a + ({b}) );
    if (name != "ALL") {
        if (pos + 18 < sizeof(cmds)) {
            a = a[pos-2..pos+2]+a[<15..];
        } else if (pos < sizeof(cmds) - 13) {
            a = a[pos-2..];
        } else {
            // a = a[<15..];
        }
    }
    msg_write(CMSG_GENERIC, "\nWizard top score list\n\n");
    if (total_cmd == 0)
        total_cmd = 1;
    for (i = sizeof(a); i; ) {
        b = a[<i--];
        if (b[WL_GIGACOST] > 1000)
            printf("%-15s %5d %2d%% (%d)\t[%d%4dk,%5d] %6d %d\n",
              b[WL_NAME], b[WL_COMMANDS],
              b[WL_COMMANDS] * 100 / total_cmd, b[<1],
              b[WL_GIGACOST] / 1000,
              b[WL_COST] / 1000 + (b[WL_GIGACOST] % 1000) * 1000000000,
              b[WL_HEART_BEATS], b[WL_EXTRA], b[WL_ARRAY_TOTAL]
            );
        else
            printf("%-15s %5d %2d%% (%d)\t[%4dk,%5d] %6d %d\n",
              b[WL_NAME], b[WL_COMMANDS],
              b[WL_COMMANDS] * 100 / total_cmd, b[<1],
              b[WL_COST] / 1000 + (b[WL_GIGACOST] % 1000) * 1000000000,
              b[WL_HEART_BEATS], b[WL_EXTRA], b[WL_ARRAY_TOTAL]
            );
    }
    printf("\nTotal         %7d     (%d)\n\n", total_cmd, sizeof(cmds));
}
