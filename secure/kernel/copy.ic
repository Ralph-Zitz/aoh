/* -------------------------------------------------------------------------
 * copy - kernel function to copy any lpc-datatype
 * -------------------------------------------------------------------------
 * Usage: b = copy( a );
 * -------------------------------------------------------------------------
 */

#if !__EFUN_DEFINED__(copy)

#include <driver/lpctypes.h>

/* -------------------------------------------------------------------------
 * prototypes
 * -------------------------------------------------------------------------
 */

public mixed copy( mixed src );
private mixed * copy_type_pointer( mixed * src );
private mapping copy_type_mapping( mapping src );

/* -------------------------------------------------------------------------
 * copy_type_pointer - copy array
 * -------------------------------------------------------------------------
 */

private mixed * copy_type_pointer( mixed * src ) {
  return map( src, #'copy /*'*/ );
}

/* -------------------------------------------------------------------------
 * copy_type_mapping - copy mapping
 * -------------------------------------------------------------------------
 */

private mapping copy_type_mapping( mapping src ) {
  int width;

  width = get_type_info( src, 1 ); /* returns the width of a mapping */
  if ( width == 1 ) {
    /* faster version for width 1 */
    return mkmapping( copy_type_pointer( m_indices( src ) ),
                      copy_type_pointer( m_values( src ) ) );
  }
  else {
    int size, i, w;
    mixed * tx;

    /* get our size */
    size = sizeof( src );
    
    /* allocate an array with width entries */
    tx = allocate( width + 1 );

    /* first entry of tx are the indices, here we use the efun */
    tx[0] = copy_type_pointer( m_indices( src ) );

    /* for the other entries of tx we allocate arrays of size */
    for( w = 1; w <= width; w++ ) 
      tx[w] = allocate( size );

    /* now walk over the whole mapping and fill all values of tx */
    for( i = 0; i < sizeof( tx[0] ); i ++ )
      for( w = 0; w < width; w++ )
        tx[w+1][i] = copy( src[tx[0][i],w] );

    /* tx is now a something like an alist, make a mapping from that,
     * apply expands tx, i.e. we call mkmapping( tx[0], tx[1], tx[2], ... )
     */

    return apply( #'mkmapping /*'*/, tx );
  }
}

/* -------------------------------------------------------------------------
 * copy - copy anything, calls copy_type_pointer/mapping
 * -------------------------------------------------------------------------
 */

public mixed copy( mixed src ) {
  switch( typeof( src ) ) {
  case T_POINTER:
    src += ({}); /* copy itself */
    return copy_type_pointer( src ); /* copy it's contents */
  case T_MAPPING:
    return copy_type_mapping( src ); /* copy it */
  default:
    return src;
  }
}
#endif

/* ********************************************************************** */
