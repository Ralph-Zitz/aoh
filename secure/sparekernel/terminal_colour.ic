/*--------------------------------------------------------------------------
 * terminal_colour emulation simul-efun 
 *
 * Copyright (C) 1997 by One Step Beyond.
 * All Rights Reserved.
 * Permission granted for non-commercial use.
 *--------------------------------------------------------------------------
 * NOTE: this function is not really bug-free, but works. It is not intended
 *       to be well programmed or fast, it is just there for wizards who are
 *       not able to compile an own driver with the terminal_colour efun.
 *         Mica@OSB 
 */

#if !__EFUN_DEFINED__(terminal_colour)
varargs string terminal_colour( string str, mapping trans, 
                                  int wrap, int ident ) {
  string * parts;
  string ret, token, part1, part2;
  mixed tx;
  int i, l, c, n, maybetoken;

  if ( ! intp( ident ) )
    raise_error( "Bad argument 4 to terminal_colour()\n" );
  if ( ! intp( wrap ) )
    raise_error( "Bad argument 3 to terminal_colour()\n" );
  if ( ! mappingp( trans ) )
    raise_error( "Bad argument 2 to terminal_colour()\n" );
  if ( ! stringp( str ) )
    raise_error( "Bad argument 1 to terminal_colour()\n" );

  /* explode based on the delimiters */
  if ( ! sizeof( parts = regexplode( str, "[^%\^]*" ) - ({ "" }) ) )
    return "";

  /* combine 'real' delimiters */
  i = 0;
  while( i < ( l = sizeof( parts ) ) ) {
    if ( ( parts[i] == "%" ) &&
         ( i + 1 < l ) &&
         ( parts[i+1] == "^" ) ) {
      parts[i] = "%^";
      parts = parts[0..i]+parts[i+2..];
    }
    i++;
  }

  /* combine the rest */
  i = 0;
  while( i < ( l = sizeof( parts ) ) ) {
    if ( ( parts[i] != "%^" ) &&
         ( i - 1 >= 0 ) && 
         ( parts[i-1] != "%^") ) {
      parts[i-1] += parts[i];
      parts = parts[0..i-1]+parts[i+1..];
    }
    else
      i++;
  }

  /* walk over the found and replace the tokens */
  maybetoken = 0;
  token = 0;
  ret = "";
  l = 0;
  for( i = 0; i < sizeof( parts ); i ++ ) {
    if ( parts[i] == "%^" ) {
      if ( maybetoken ) {
        if ( token ) {
          if ( stringp( tx = trans[token] ) )
            ret += tx;
          else
            ret += token;

          token = 0;
        }

        maybetoken = 0;
      }
      else
        maybetoken = 1;
    }
    else {
      if ( maybetoken ) 
        token = parts[i];
      else {
        if ( wrap ) {
          part2 = parts[i];
          do {
            if ( ( n = member(part2, '\n' ) ) != -1 ) {
              part1 = part2[0..n-1];
              part2 = part2[n+1..];
            }
            else {
              part1 = part2;
              part2 = 0;
            }

            c = strlen( part1 );
            if ( l + c > wrap ) {
              while( c-- ) {
                if ( part1[c] == ' ' )
                  break;
              }
              if ( c < 0 ) 
                c = wrap - l - 1;

              ret += ( part1[0..c] + "\n" );

              if ( ident ) {
                ret += sprintf( "%-*s", ident, "" );
                l = ident;
              }
              else
                l = 0;

              if ( part1[c+1..] != "" ) {
                if ( part2 )
                  part2 = part1[c+1..] + "\n" + part2;
                else
                  part2 = part1[c+1..];
              }
            }
            else {
              if ( part2 ) {
                ret += (part1 + "\n");
                if ( ident && part2 != "" ) {    
                  ret += sprintf( "%-*s", ident, "" );
                 l = ident;
                }
                else
                  l = 0;
              }
              else
                ret += part1;
            }
          } while( part2 );
        }
        else
          ret += parts[i];
      }
    }
  }
  if ( token )
    ret += token;

  return ret;
}
#endif
