std/corpse.c:// TODO: inherit food so the corpse is eatable.
std/herb.c:// TODO: Functions need to be implemented
std/herb2.c:// TODO: Functions need to be implemented
std/living/chat.c: * TODO:  document how to give msg-class withing chats/achats
std/living/chat.c: * TODO:: ({ (int)class, (mixed) data })
std/living/chat.c: * TODO: DoChat should use somthing different than CMSG_ROOM
std/living/chat.c: * TODO: DoAttackChat should use something different that CMSG_ROOM
std/living/chat.c: * TODO:  let the programmer decide which kind of message he/she wants
std/living/chat.c: * TODO:: beeing caught (maybe SetMatchClasses( int * ) )
std/living/chat.c:    /* TODO:  CMSG_CHANNEL needs an extra function for matches, or maybe
std/living/chat.c:     * TODO:: just pass it through test match. Currently we ignore them,
std/living/chat.c:     * TODO:: as npcs do not get them without being plugged into the
std/living/chat.c:     * TODO:: CHANNEL_D anyway.
std/living/chat.c:    /* TODO:  CMSG_GENERIC should not be caught by livings but keep this
std/living/chat.c:     * TODO:: till the message system is fully implemented and accepted.
std/living/chat.c:    /* TODO:  check which other messages classes need to be processed, maybe
std/living/chat.c:     * TODO:: some combat messages too
std/living/description.c:  // TODO: That only clones can get a living_name might cause problems
std/living/description.c:  // TODO:: in special npcs. None of such kind are yet known, though.
std/living/description.c:  // TODO: if distance !=0 && distance >0 check distance to TO-liv
std/living/description.c:  // TODO: Skill checks !!!
std/living/heart.c:      // TODO: Possible security breach here.
std/living/stats.c:  // TODO: what shall NPCs do with their talent commands?
std/living.c:  // TODO: Adapt Stats and derived values according to P_RACE
std/living.c:  // TODO: Set Health-Rates, according to stats
std/living.c:// TODO: Make it an InitDefault (int level, string race)
std/living.c:  // TODO: Adapt these values to something useful.
std/npc/view.c:** TODO:  show_object, show need to be replaced after a solution for the
std/npc/view.c:** TODO:: display filter of the room was found
std/player/bin/color.c: * TODO: Full vt100 support
std/player/bin/config.c: * TODO:  ansi.h should not be used, but currently ANSI_BOLD is needed for
std/player/bin/config.c: * TODO:: vt100
std/player/bin/finger.c: * TODO: fill in all values for the FingerData
std/player/bin/finger.c:  /* TODO:  domain data is taken from find_userinfo */
std/player/bin/finger.c:  /* TODO:: there should be a daemon one can query the domain data */
std/player/bin/who.c: * TODO: Put the MUDNAME above all names and set it off nicely (Superj...!)
std/player/life.c:       * TODO: If the wizard got destructed outside his home, that is where
std/player/life.c:       * TODO:: the statue will stand and this check won't find it. The solution
std/player/life.c:       * TODO:: would be to store the object_name() of either ndstatue or ndroom
std/player/life.c:       * TODO:: in the savefile and work from there.
std/player/message.c: * TODO: prettyfile should be moved to secure/kernel (better name :)
std/player/message.c: * TODO: InitColourTranslation could be made more efficient
std/player/misc.c:   // TODO: 'mail' can be both object and keyword. Resolve this.
std/player/objects.c:// TODO: The parsing and output is crude. Should also handle clones,
std/player/objects.c:// TODO:: local object specs and all that.
std/player.c:  // TODO: Remove this compat after everyone is converted
std/room/description.c:  else if (excl)  // TODO: document this special feature
std/room/details.c: * TODO:  the GetVItem for finds always the first but not the best match,
std/room/details.c: * TODO:: this is wanted for 'look' etc. but is not best for add_compat.
std/room/details.c: * TODO:: The fun only returns the first added/modified detail
std/room/details.c: *  TODO: Compat properties should be removed asap!
std/room/exits.c:      dir = "north"; // TODO: this has to be set during logon
std/room/exits.c:      // TODO: PANIC!
std/room/exits.c:      dir = "north"; // TODO: this has to be set during logon
std/room/restrictions.c:  // TODO: The window weather stuff should also check doors. But otoh, we
std/room/restrictions.c:  // TODO:: have lots of implicite doors (aka 'exits')... hmm.
std/room/vdrink.c: * TODO: add 'all' handling
std/room/vdrink.c:// TODO: problem with our std/drink -> it doesn't support PROPERTIES!
std/room/vfood.c: * TODO: add 'all' handling
std/room/vfood.c:// TODO: problem with our std/food -> it doesn't support PROPERTIES!
std/room/vget.c: * TODO: the command handling itself should be moved to the std/living
std/room/vget.c: * TODO: add 'all' handling
std/room/vitems.c: * TODO:  this is just the first step for virtual items,
std/room/vitems.c: * TODO:: they should be getable and searchable too and be printed
std/room/vitems.c: * TODO:: at the room desc like normal items
std/room/vitems.c: * TODO:: Explorer Handling needs to be readded
std/room/vitems.c: * TODO:: reactivate PV_SURFACE, take care of problems with AddDetail, maybe
std/room/vitems.c: * TODO::  this one messes up the compat code for identifying similar details
std/room/vitems.c: * TODO:  prep handling conflicts with 'all' handling
std/room/vitems.c: * TODO:: for multi-looks making vitems short from ads+ids is worse
std/room/vitems.c: * TODO:: Explorer handling should be done by the vitems (P_EXPLORABLE ?)
std/room/vwindows.c: * TODO:: Windows commands should only work if the player is able to see
std/room/vwindows.c: * TODO::  the window
std/room/vwindows.c: * TODO:: reset() issues wrong PV_WINDOW_SHORT to the other room
std/room/vwindows.c: * TODO:: vwindows should catch errors for not existing PV_WINDOW_PATH
std/room/vwindows.c:  /* TODO:  WindowShort is wrong, needs to be the short of the other side
std/room/vwindows.c:   * TODO:: for the other side message
std/room/vwindows.c:    /* TODO: val wrongly uses the window short of this room */
std/room/vwindows.c:    /* TODO: val wrongly uses the window short of this room */
std/room/description.16May1999:  else if (excl)  // TODO: document this special feature
std/room/vitems.052898: * TODO:  this is just the first step for virtual items,
std/room/vitems.052898: * TODO:: they should be getable and searchable too and be printed
std/room/vitems.052898: * TODO:: at the room desc like normal items
std/room/vitems.052898: * TODO:: Explorer Handling needs to be readded
std/room/vitems.052898: * TODO:: reactivate PV_SURFACE, take care of problems with AddDetail, maybe
std/room/vitems.052898: * TODO::  this one messes up the compat code for identifying similar details
std/room/vitems.052898: * TODO:  prep handling conflicts with 'all' handling
std/room/vitems.052898: * TODO:: for multi-looks making vitems short from ads+ids is worse
std/room/vitems.052898: * TODO:: Explorer handling should be done by the vitems (P_EXPLORABLE ?)
std/room/vitems.052898:   * TODO: preposition data should be collected during Add
std/room/restrictions.062898:  // TODO: The window weather stuff should also check doors. But otoh, we
std/room/restrictions.062898:  // TODO:: have lots of implicite doors (aka 'exits')... hmm.
std/skills.c:    else if (!str)   // TODO: what to do with no argument?
std/skills.c:  // TODO: Maybe this idendification has to be improved later on
