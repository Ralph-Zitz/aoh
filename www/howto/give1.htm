<html>

<head>
<title>Simple Give</title>
</head>

<body>
<h1>A simple give 'command'</h1>

To code an npc, which should react to different items, use
overloading of the function <b>notify_enter()</b> (see 'man moving').
The function notify_enter() is part of any object and can be used inside
of any object!<br>
It is possible to use the function for nps to detect incoming objects but
you can use it for example in container objects or rooms to detect incoming
objects too.

<p>

<h2>Using of notify_enter</h2>
Each object that is moved to another object calls:
<ul>
<li>allow_enter() in the target object (see 'man moving')
<li>move of the source object to move it to the target object (of course, only
     if it is allowed by target <b>and</b> the object itself).
<li>notify the target that an object has entered by calling its notify_enter() function.
</ul>
<p>

<b>Hint:</b> the return value of notify_enter() is of type void.<br>
Never forget to call ::notify_enter() (the 
function of the parent object)
while overloading this function. If you forget it, it can lead to 
unpredictable results.<br>
The notify_enter() is used to update weight,lights and so on. which are not 
correctly handled if you forget the call to the parent function!

<p>

<b>Hint two:</b>Be careful using this_player() inside a notify_enter() function. 
The object which is identified by this-player() haven't to be the object where the item
come from! this_player() is just the object which caused the command to move the item.
If you <b>give torch of bag to panda</b> this-player() will be you, but the 
parameter <b>from</b> in notify_enter will be the bag, and <b>dest</b> will be the panda.

<p>

<b>Hint three:</b>The object that is given away is previous_object() (see 'man moving').
If you want to know something about the given object itself (like weights, short ...) you can 
call <code>previous_object()->QueryXXX()</code> to find out that information.

<p>
At first: if you want to use these examples in your objects, you have to include 
<b>moving.h</b> into your files, else it will cause an compiler error.

Okay lets start with a short example:<br>
(The examples are shown with linenumbers.)

<p>

<h3>Example 1:</h3>
The npc should thanks for any item, which he got by a 'give' commands:
<code>
<ol>
<li>notify_enter(object from,int method, mixed extra) {<br>
<li>&nbsp; ::notify_enter(from,method,extra);
<li>&nbsp; if (mode!=M_GIVE) return;<br>
<li>&nbsp; show("Hey nice guy - thank you!\n");
<li>}
</ol>
</code><p>

<ol>
<li>overloading of the pre-defined function<br>
<li>calling of the parent master function<br>
<li>check if the mode was a give, if not, do nothing<br>
<li>thanks for the given item
</ol>

Okay, easy eh? But the code shown above has some disadvantages:
<ul>
<li>We don't get any information what is given to the npc
<li>An item, that has an <code>SetShort(0)</code> prints the 'give'-message 
too, even if it is invisible!! If invisible items are given, the give should be silent!
<li>The person who gives the item isn't known.
</ul>

Okay, lets start with a more complex one:

<h3>Example 2:</h3>
The npc should thanks for any item, which he got by a 'give' commands:
<code>
<ol>
<li>notify_enter(object from,int method, mixed extra) {<br>
<li>&nbsp; ::notify_enter(from,method,extra);
<li>&nbsp; if (mode!=M_GIVE) return;<br>
<li>&nbsp; if (!previous_object()->QueryShort()) return;
<li>&nbsp; show(
<li>&nbsp; &nbsp; "Hey "+(from->QueryName()||"Someone")+" - thank you for "+
<li>&nbsp; &nbsp; add_a(
<li>&nbsp; &nbsp; previous_object()->QueryShort() )+"!\n");
<li>}
</ol>
</code><p>

<ol>
<li>overloading of the pre-defined function<br>
<li>calling of the parent master function<br>
<li>check if the mode was a give, if not, do nothing<br>
<li>check if the given item isn't invisible
<li>show - tells only to the person if he can see in the room
<li>output who gives the item (a check for invisble players is there too)
<li>adds an 'a' or 'an' to the Short() of given item, if needed
<li>output what item is given
</ol>

The call to <code>from->QueryName()</code> may return 0. In this case the
player (npc,living) is invisible. The check above return the name or 'someone' if the
call to <code>QueryName()</code> returns 0.

<p>

Now lets identify some of the given items (like in quests). We want to know, 
if the item is needed one for the quest:

<h3>Example 3:</h3>
The npc should thanks for any item, which he got by a 'give' commands,
but should react to a special item, needed for a quest.

There are some solutions for doing this:
<ul>
<li>checking the IDs of the given object
<li>checking the filename of the given object
<li>and some more method (like checking creator and ...)
</ul>
In my opinion - the best way is to check the IDs of the given item. 
It is very fast, easy to code, independent of moving the item-code into other directories,
but not secure against cheating by wizards *grins*).

<p>

Okay - think about an npc which is waiting for a wooden stick cutted from a 
special tree. The code for the stick looks like the following:<br>

<code>
create() {<br>
&nbsp; ::create();<br>
&nbsp; SetShort(..);SetLong(..);  // and so on<br>
&nbsp; AddId("__cutted_wooden_stick_quest_id__");<br>
}

<p>

</code>
Now the code needed to add to the npc:
<code>
<ol>
<li>notify_enter(object from,int method, mixed extra) {<br>
<li>&nbsp; ::notify_enter(from,method,extra);
<li>&nbsp; if (mode!=M_GIVE) return;<br>
<li>&nbsp; if (!previous_object()->QueryShort()) return;
<li>&nbsp; show(
<li>&nbsp; &nbsp; "Hey "+(from->QueryName()||"Someone")+" - thank you for "+
<li>&nbsp; &nbsp; add_a(
<li>&nbsp; &nbsp; previous_object()->QueryShort() )+"!\n");
<li>&nbsp; if (!previous_object()->id("__cutted_wooden_stick_quest_id__")) return;
<li>&nbsp; // do whatever you want in your quest
<li>}
</ol>
</code><p>

<ol>
<li>overloading of the pre-defined function<br>
<li>calling of the parent master function<br>
<li>check if the mode was a give, if not, do nothing<br>
<li>check if the given item isn't invisible
<li>show - tells only to the person if he can see in the room
<li>output who gives the item (a check for invisble players is there too)
<li>adds an 'a' or 'an' to the Short() of given item, if needed
<li>output what item is given
<li>let the given item identify itself, if it isn't the correct one - do nothing else
<li>here you can add your handling if the correct item is given
</ol>
<p>

Okay, look easy? yes it is. But some 'traps' or problems are still existing. You can't:
<ul>
<li>remove or destruct the given item inside the notify_enter() function
<li>move the given item to any other place inside the notify_enter() function
    (give it back for example)
<li>rejecting items (because notify_enter() is called <b>after</b> the item is moved)
</ul>
Some of the noted things above will cause an error (or simple don't work).

<p>

The (easy) solutions for these problems can be found in the 
<a href="give2.htm">more complex examples</a>.<br>
How to reject items, is shown in <a href="give3.htm">accept only special items</a>.
<p>

<a href="give2.htm">To more complex examples</a><br>
<a href="give3.htm">Accept only special items</a><br>
<a href="give_i.htm">Back to index</a>

<p>
(C) Magictcs - Jan 1998
</body>
</html>





