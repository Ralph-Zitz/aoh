<html>
<head>
<title>Detect a 'Move'</title>
</head>

<body>
<h1>Detect a 'Move'</h1>

Okay, we now know how to detect incoming objects and we know how to reject them.
But what happens when the 'moved' object itself should know its moving?
Is there an easy way to detect this inside the object without adding a 'give' command
using add_action() ?

<p>

The answer is - YES - there is an real easy way to do so. This chapter will show you some examples
and will explain how to write code for this.

<p>
<h2>Some basics about moving</h2>

Each object has a 'move' function defined. Normally you don't have to use or to overload this
function, because the standard code for this function is more than enough. But in some special
ways we can overload this function to enable a 'move' detect or 'move' control.

<p>

The function is defined as:<br>
<code>
int move (object|string dest, void|int method, void|mixed extra);
</code>
<p>
When a move is performed, this function of the object is called after checking if the
object is allowed to move (using prevent_leave() in the old environment and calling
allow_enter() in the destination object).<br>
<b>Note:</b> A NO_CHECK move will not check these both functions.
<br>
The move-function will not (!) get the old environment as parameter, because it is not 
needed normally. You can get it by using environment().

<p>
<h2>Move Detection</h2>
How can we use 'move()' to detect a object-move? It's really simple, just let us take 
a look at the following code example:
<code>
<ol>
<li>int move(mixed dest, int method, mixed extra) {
<li>&nbsp; string d1,d2;
<li>&nbsp; if (method != M_GIVE) return ::move(dest, method, extra);
<li>&nbsp; if (!dest) return ME_NO_MOVE;
<li>&nbsp; if (objectp(dest)) dest = file_name(dest);
<li>&nbsp; if (sscanf(dest,"%ssykorath/npc/dealer%s",d1,d2)==2) {
<li>&nbsp; &nbsp; // Hey we are moved into the dealer-npc of sykorath!
<li>&nbsp; &nbsp; tell_object(environment(),"I'm moved.....\n"); }
<li>&nbsp;     return ::move(dest,method,extra);
<li>}
</ol>
</code>
<p>
Okay, what does this short example? I will try to explain it line by line:
<ol>
<li>overload the standard move function with an own defined<br>
<li>allocate two string (needed for the checks)<br>
<li>Is the move-method a give? if not, move it normal without any special comments<br>
<li>is there a destination? We don't want to move the object to the void...<br>
<li>Looks little bit tricky, but is needed here. The destination may be an object OR a 
filename (as string), if it is an object - it will be converted to the filename of this object.<br>
<li>scan the filename if the is the string 'sykorath/npc/dealer' inside<br>
<li>if yes, then the lines 7-8 are executed, the move isn't performed yet!<br>
<li>output something to the old environment (we can do other things here)
<li>perform the move and return the move-return code normally
</ol>
The strings d1 and d2 are temporary used, They ma contain the domain path "/d/" and
the clone number like "#4324". They are just used for correct working of the sscanf 
function. You can replace the sscanf by (for example) a regexplode() command or 
simple by a strstr().

<p>

This was a simple example for detecting a move. We can use it to set/reset special values
inside our objects. We can do other things, but we can <b>not remove or destruct</b> the item inside such an 
overloaded move ! This will the driver cause to create a runtime-error.
What we can do is just as simple as in the latest examples of the 'give' command. We can
call remove or destruct using call_out():<br>
<code>
....<br>
call_out("remove",1);<br>
...<br>
</code>
So the move is performed and one second later the object will remove itself.

Now we can check the next examples about <a href="move2.htm">Move-Control</a>

<p>
<hr>
More informations about move/moving are available using the 'man moving' command.

<p>

<a href="#back">Back to overview</a>

<p>
(C) Magictcs - 1998

</body>

</html>

