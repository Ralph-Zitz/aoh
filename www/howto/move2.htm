<html>
<head>
<title>Move Control</title>
</head>

<body>
<h1>Move Control</h1>

Let me give short examples, where we need a 'move Control':
<ul>
<li>We want to code an item, that can be moved to anywhere, except one 
(or more) special places.
<li>We want to code an npc, who can walk around, but who cannot leave his
house (garden,town,area...).
</ul>

How can we do this? - It's simple using overloading the move() function.

<h2>Reject the move</h2>
<code>
<ol>
<li>int move(mixed dest, int method, mixed extra) {
<li>&nbsp; string d1,d2;
<li>&nbsp; if (method != M_GIVE) return ::move(dest, method, extra);
<li>&nbsp; if (!dest) return ME_NO_MOVE;
<li>&nbsp; if (objectp(dest)) dest = file_name(dest);
<li>&nbsp; if (sscanf(dest,"%ssykorath/npc/dealer%s",d1,d2)==2) {
<li>&nbsp; &nbsp; tell_object(environment(),"Don't give this item to him, offer it please!\n");
<li>&nbsp; &nbsp; return ME_NO_MOVE; }
<li>&nbsp;     return ::move(dest,method,extra);
<li>}
</ol>
</code>
<p>
Okay, what this is short example for our first problem. You can move this item to anywhere, 
except to the dealer using a 'give' command. The give to this dealer is blocked by the overloaded
move function.
<ol>
<li>overload the standard move function with an own defined<br>
<li>allocate two string (needed for the checks)<br>
<li>Is the move-method a give? if not, move it normal without any special comments<br>
<li>is there a destination? We don't want to move the object to the void...<br>
<li>Looks little bit tricky, but is needed here. The destination may be an object OR a 
filename (as string), if it is an object - it will be converted to the filename of this object.<br>
<li>scan the filename if the is the string 'sykorath/npc/dealer' inside<br>
<li>if yes, then send some output to the old environment<br>
<li>forbid the move into the dealer
<li>perform the move and return the move-return code normally
</ol>


<p>

This was a simple example for detecting a move. We can use it to set/reset special values
inside our objects. We can do other things, but we can <b>not remove or destruct</b> the item inside such an 
overloaded move ! This will the driver cause to create a runtime-error.
What we can do is just as simple as in the latest examples of the 'give' command. We can
call remove or destruct using call_out():<br>
<code>
....<br>
call_out("remove",1);<br>
...<br>
</code>
So the move is performed and one second later the object will remove itself.

<h2>A moving NPC</h2>
The second problem can be solved by nearly the same code as above:
<code>
<ol>
<li>int move(mixed dest, int method, mixed extra) {
<li>&nbsp; string d1,d2;
<li>&nbsp; if (method != M_GO) return ::move(dest, method, extra);
<li>&nbsp; if (!dest) return ME_NO_MOVE;
<li>&nbsp; if (objectp(dest)) dest = file_name(dest);
<li>&nbsp; if (sscanf(dest,"%ssykorath/rooms/inner%s",d1,d2)!=2) {
<li>&nbsp; &nbsp; return ME_NO_MOVE; }
<li>&nbsp;     return ::move(dest,method,extra);
<li>}
</ol>
</code>
If you put this code into a walking npc, the npc can never leave the inner city of sykorath my
simple walking. He can moved out by a teleport move of course, but all M_GO are blocked by
the overloaded move().

<p>
<hr>
More informations about move/moving are available using the 'man moving' command.

<p>

<a href="#back">Back to overview</a>

<p>
(C) Magictcs - 1998

</body>

</html>

